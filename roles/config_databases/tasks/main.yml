---
- name: "Install pymysql"
  pip:
    name: "{{ item }}"
    state: present
  with_items:
    - pymysql
    - requests
- name: "check if we can login as root"
  mysql_db:
    login_user: root
    login_password: "{{mysql_root_pass}}"
    name: information_schema
    state: present
  register: login_check
  ignore_errors: yes
- name: "update mysql root password for root account"
  mysql_user:
    name: root
    login_unix_socket: /var/lib/mysql/mysql.sock
    host: 'localhost'
    password: "{{ mysql_root_pass }}"
    priv: "*.*:ALL,GRANT"
    check_implicit_admin: true
  when: login_check.failed

- name: "create database"
  community.mysql.mysql_db:
    name: "{{ item }}"
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    state: present
  with_items:
      - keystone
      - glance
      - placement
      - nova
      - nova_api
      - nova_cell0
      - neutron
- name: "grant database priviliges"
  community.mysql.mysql_user:
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    state: present
    name: "{{item[0]}}"
    host: "localhost"
    password: "{{item[1]}}"
    priv: "{{item[0]}}.*: ALL,GRANT"
    append_privs: true
  loop:
      - ["keystone","{{keystone_db_pass}}"]
      - ["glance","{{glance_db_pass}}"]
      - ["placement","{{placement_db_pass}}"]
      - ["nova","{{nova_db_pass}}"]
      - ["neutron","{{neutron_db_pass}}"]
- name: "grant database priviliges"
  community.mysql.mysql_user:
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    state: present
    name: "{{item[0]}}"
    host: "%"
    password: "{{item[1]}}"
    priv: "{{item[0]}}.*: ALL,GRANT"
    append_privs: true
  loop:
      - ["keystone","{{keystone_db_pass}}"]
      - ["glance","{{glance_db_pass}}"]
      - ["placement","{{placement_db_pass}}"]
      - ["nova","{{nova_db_pass}}"]
      - ["neutron","{{neutron_db_pass}}"]
- name: "grant additional nova privileges"
  community.mysql.mysql_user:
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    state: present
    name: "nova"
    host: "localhost"
    password: "{{nova_db_pass}}"
    priv: "{{ item }}.*: ALL,GRANT"
    append_privs: true
  with_items:
    - nova_api
    - nova_cell0
- name: "grant additional nova privileges"
  community.mysql.mysql_user:
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    state: present
    name: "nova"
    host: "%"
    password: "{{nova_db_pass}}"
    priv: "{{ item }}.*: ALL,GRANT"
    append_privs: true
  with_items:
    - nova_api
    - nova_cell0
- name: "configure rabbitMQ"
  community.rabbitmq.rabbitmq_user:
    user: openstack
    password: "{{rabbitmq_db_pass}}"
    login_port: 25672
    node: "rabbit@{{controller_hostname}}"
    permissions:
      - vhost: /
        configure_priv: .*
        read_priv: .*
        write_priv: .*
    state: present
- name: "Configure memcached"
  ansible.builtin.replace:
    path: /etc/sysconfig/memcached
    regexp: '127.0.0.1'
    replace: '0.0.0.0'
    #- name: "shell command"
    #  shell: "mysql < /tmp/init_db.sql"
    #- name: "Restore database"
    #  community.mysql.mysql_db:
    #    name: my_db
    #    state: import
    #    target: /tmp/init_db.sql
